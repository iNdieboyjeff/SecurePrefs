buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        google()
    }

    dependencies {
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:latest.release"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath 'com.android.tools.build:gradle:3.2.0'
        classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.13'
    }

}

plugins {
    id "com.jfrog.bintray" version "1.7.3"
    id "org.sonarqube" version "2.5"

}

apply plugin: 'com.android.library'
apply plugin: 'net.ltgt.errorprone'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'

allprojects {
    group = 'util.android'
    version = '1.0.0'
}

android {
    compileSdkVersion 28
    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "TRANSFORMATION", "\"AES/GCM/NoPadding\""
        buildConfigField "String", "KEY_TRANSFORMATION", "\"AES/GCM/NoPadding\""
        buildConfigField "String", "IV", "\"fldsjfodasjifudslfjdsaofshaufihad45nfojd30sfoihoirejt90u45tknmrar50483u504jq9du3jpbjydf7js9dufq23\""
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

def siteUrl = 'https://github.com/iNdieboyjeff/SecurePrefs'   // Homepage URL of the library
def gitUrl = 'https://github.com/iNdieboyjeff/SecurePrefs.git'   // Git repository URL
def issueUrl = 'https://github.com/iNdieboyjeff/SecurePrefs/issues'
def licenseName = 'The Apache Software License, Version 2.0'
def licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
def allLicenses = ["Apache-2.0"]

publishing {
    publications {
        Production(MavenPublication) {
            artifact("$buildDir/outputs/aar/secureprefs-release.aar")
            groupId 'util.android'
            artifactId 'secureprefs'
            version version

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                // Iterate over the implementation dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    // Ensure dependencies such as fileTree are not included in the pom.
                    if (it.name != 'unspecified') {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    title = 'Secure Preferences ' + version
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    exclude '**/BuildConfig.java'
    options {
        links "http://docs.oracle.com/javase/7/docs/api/"
        linksOffline "http://d.android.com/reference","${android.sdkDirectory}/docs/reference"
    }
    failOnError false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}
afterEvaluate {
    javadoc.classpath += project.android.libraryVariants.toList().first().javaCompile.classpath
}
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")
    dryRun = false //[Default: false] Whether to run this as dry-run, without deploying
    publish = true //[Default: false] Whether version should be auto published after an upload
    override = true //[Default: false] Whether to override version artifacts already published
    publications = ['Production']
    configurations = ['archives']
    pkg {
        repo = "maven"
        name = "secureprefs"
        websiteUrl = siteUrl
        publicDownloadNumbers = true
        vcsUrl = gitUrl
        issueTrackerUrl = issueUrl
        labels = ["Android"]
        desc = "Secure Preferences for Android"
        licenses = ["Apache-2.0"]
        publish = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}
